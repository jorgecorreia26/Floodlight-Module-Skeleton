package net.floodlightcontroller.exe1;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import net.floodlightcontroller.core.FloodlightContext;
import net.floodlightcontroller.core.IFloodlightProviderService;
import net.floodlightcontroller.core.IOFMessageListener;
import net.floodlightcontroller.core.IOFSwitch;
import net.floodlightcontroller.core.IListener.Command;
import net.floodlightcontroller.core.module.FloodlightModuleContext;
import net.floodlightcontroller.core.module.FloodlightModuleException;
import net.floodlightcontroller.core.module.IFloodlightModule;
import net.floodlightcontroller.core.module.IFloodlightService;
import net.floodlightcontroller.core.types.MacVlanPair;
import net.floodlightcontroller.learningswitch.LearningSwitch;
import net.floodlightcontroller.packet.Ethernet;
import net.floodlightcontroller.util.OFMessageUtils;

import org.projectfloodlight.openflow.protocol.OFFlowMod;
import org.projectfloodlight.openflow.protocol.OFFlowRemoved;
import org.projectfloodlight.openflow.protocol.match.Match;
import org.projectfloodlight.openflow.protocol.match.MatchField;
import org.projectfloodlight.openflow.protocol.OFFactories;
import org.projectfloodlight.openflow.protocol.OFFlowModCommand;
import org.projectfloodlight.openflow.protocol.OFFlowModFlags;
import org.projectfloodlight.openflow.protocol.OFMessage;
import org.projectfloodlight.openflow.protocol.OFErrorMsg;
import org.projectfloodlight.openflow.protocol.OFPacketIn;
import org.projectfloodlight.openflow.protocol.OFPacketOut;
import org.projectfloodlight.openflow.protocol.OFVersion;
import org.projectfloodlight.openflow.types.MacAddress;
import org.projectfloodlight.openflow.types.OFBufferId;
import org.projectfloodlight.openflow.types.OFPort;
import org.projectfloodlight.openflow.types.U64;
import org.projectfloodlight.openflow.types.VlanVid;
import org.projectfloodlight.openflow.protocol.OFType;
import org.projectfloodlight.openflow.protocol.action.OFAction;
import org.projectfloodlight.openflow.protocol.action.OFActionOutput;
import org.projectfloodlight.openflow.util.HexString;
import org.projectfloodlight.openflow.util.LRULinkedHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Example1a  implements IFloodlightModule, IOFMessageListener {

    // Module dependencies
    protected IFloodlightProviderService floodlightProvider;
    protected static Logger log;
    
    // data structures for the learning switch feature
    // Stores the learned state for each switch
    protected Map<IOFSwitch, Map<MacAddress, OFPort>> macToSwitchPortMap;
    
    
	@Override
	public String getName() {
		 return Example1a.class.getSimpleName();
	}
	
	//////utility methods to store/retrieve  MACAddress/Port Mappings in the macToSwitchPortMap
	
	/**
	 * Adds a host to the MAC->SwitchPort mapping
	 * @param sw The switch to add the mapping to
	 * @param mac The MAC address of the host to add
	 * @param vlan The VLAN that the host is on
	 * @param portVal The switchport that the host is on
	 */
	protected void addToPortMap(IOFSwitch sw, MacAddress mac, OFPort portVal) {
		
		Map<MacAddress, OFPort> swMap = macToSwitchPortMap.get(sw);

		if (swMap == null) {
			// To make it possible to be accessible by a REST API we need to make it thread safe
			swMap = Collections.synchronizedMap(new LRULinkedHashMap<MacAddress, OFPort>(1000)); // creates HashMap for mac/port
			macToSwitchPortMap.put(sw, swMap); // stores the  HashMap for mac/por for the key values of the specified switch
		}
		swMap.put(mac, portVal); //stores mac and port in the mac/port HashMap
	}


	/**
	 * Get the port that a MAC is associated with
	 * @param sw The switch to get the mapping from
	 * @param mac The MAC address to get
	 * @param vlan The VLAN number to get
	 * @return The port the host is on
	 */
	public OFPort getFromPortMap(IOFSwitch sw, MacAddress mac ) {

		Map<MacAddress, OFPort> swMap = macToSwitchPortMap.get(sw);
		if (swMap != null) {
			return swMap.get(mac);
		}
		// if none found
		return null;
	}

	/**
	 * Clears the MAC -> SwitchPort map for all switches
	 */
	public void clearLearnedTable() {
		macToSwitchPortMap.clear();
	}

	/**
	 * Clears the MAC -> SwitchPort map for a single switch
	 * @param sw The switch to clear the mapping for
	 */
	public void clearLearnedTable(IOFSwitch sw) {
		Map<MacAddress, OFPort> swMap = macToSwitchPortMap.get(sw);
		if (swMap != null) {
			swMap.clear();
		}
	}
	
	
	/**
     * Writes an OFPacketOut message to a switch.
     * @param sw The switch to write the PacketOut to.
     * @param packetInMessage The corresponding PacketIn.
     * @param egressPort The switchport to output the PacketOut.
     */
    private void writePacketOutForPacketIn(IOFSwitch sw, 
                                          OFPacketIn packetInMessage, 
                                          OFPort egressPort) {
    	
    	OFMessageUtils.writePacketOutForPacketIn(sw, packetInMessage, egressPort);
    }
	

    
	/**
     * Processes a OFPacketIn message. If the switch has learned the MAC to port mapping
     * If the mapping has not been learned it 
     * we will flood the packet.
     * @param sw
     * @param pi
     * @param cntx
     * @return
     */
    private Command processPacketInMessage(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx) {

    	//get Packet_In data into Ethernet Packet
    	Ethernet eth = IFloodlightProviderService.bcStore.get(cntx, IFloodlightProviderService.CONTEXT_PI_PAYLOAD);
    	//get MAC addresses from the Packet_in data
    	MacAddress sourceMac = eth.getSourceMACAddress();
		MacAddress destMac = eth.getDestinationMACAddress();
		//get ports
        OFPort inPort = (pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));
        OFPort outPort = getFromPortMap(sw, destMac);
		
		if (sourceMac == null) {
			sourceMac = MacAddress.NONE;
		}
		if (destMac == null) {
			destMac = MacAddress.NONE;
		} 
		
/* learn the port for this MAC ...*/
		if (getFromPortMap(sw, sourceMac) == null) {
			if (!sourceMac.isBroadcast() && !sourceMac.isLLDPAddress() && !sourceMac.isMulticast()) { //leave Broadcast and Multicast out
				// If not in the table, learn the port for this MAC/Port
				this.addToPortMap(sw, sourceMac, inPort);
				
				log.info("Saved in the hashmap:"
						+ " switch {} source MAC {} inPort {}",
						new Object[]{ sw, sourceMac.toString(), inPort.getPortNumber() });
			}
		}
	

/* Now output packet */
        
        // Obtain outPort from a structure where you store the learned macs
        
        if (outPort == null) {
            // If we haven't learned the port for the destMAC, flood it
            this.writePacketOutForPacketIn(sw, pi, OFPort.FLOOD);
        } else if (outPort.equals(inPort)) {
            log.info("ignoring packet that arrived on same port as learned destination:"
					+ " switch {} vlan {} dest MAC {} port {}",
					new Object[]{ sw, eth.getVlanID(), destMac.toString(), outPort.getPortNumber() });
        } else {
            // Send the buffered PacketIn in a PacketOut
            
            OFPacketOut.Builder pob = sw.getOFFactory().buildPacketOut(); // create packet out 
            // set actions for the PacketOut
			List<OFAction> actions = new ArrayList<OFAction>();
			actions.add(sw.getOFFactory().actions().buildOutput().setPort(outPort).setMaxLen(0xffFFffFF).build()); //create action to forward the learned port (variable ouPort)
			pob.setActions(actions); // set the actions
            pob.setBufferId(pi.getBufferId()); // set buffer id same as PacketIn 
           	pob.setInPort(inPort); //set the in port of the PacketOut same as the one in PacketIn 
           	sw.write(pob.build()); // build the PacketOut and send it to the switch

			}

        return Command.CONTINUE;
    }


	//OF message listener
	@Override
	public net.floodlightcontroller.core.IListener.Command receive(
			IOFSwitch sw, OFMessage msg, FloodlightContext cntx) {
		switch (msg.getType()) {
        case PACKET_IN:
            return this.processPacketInMessage(sw, (OFPacketIn) msg, cntx);
        case ERROR:
            log.error("received an error {} from switch {}", (OFErrorMsg) msg, sw);
            return Command.CONTINUE;
        default:
            break;
    }
    log.error("received an unexpected message {} from switch {}", msg, sw);
		return Command.CONTINUE; // allow the message to be handled by other PACKET_IN handlers as well (other floodlight controller modules.
	}
	
	@Override
	public boolean isCallbackOrderingPrereq(OFType type, String name) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isCallbackOrderingPostreq(OFType type, String name) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Collection<Class<? extends IFloodlightService>> getModuleServices() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls() {
		// TODO Auto-generated method stub
		return null;
	}

	/* Tell the module loader we depend on it by modifying the getModuleDependencies() function.
	 * */
	@Override
	public Collection<Class<? extends IFloodlightService>> getModuleDependencies() {
		Collection<Class<? extends IFloodlightService>> l =
		        new ArrayList<Class<? extends IFloodlightService>>();
		    l.add(IFloodlightProviderService.class);
		    return l;
	}

	@Override
	public void init(FloodlightModuleContext context)
			throws FloodlightModuleException {
		 floodlightProvider =
	                context.getServiceImpl(IFloodlightProviderService.class); //get controller instance 
		 log = LoggerFactory.getLogger(Example1a.class); //create logger class 
	// Initialize data structures
	        macToSwitchPortMap = 
	                new ConcurrentHashMap<IOFSwitch, Map<MacAddress, OFPort>>();
	        
	        log.info("Scenario B modules initialized");
		
	}

	@Override
	public void startUp(FloodlightModuleContext context)
			throws FloodlightModuleException {
		 	floodlightProvider.addOFMessageListener(OFType.PACKET_IN, this); // register to receive Packet_In messages 
	        floodlightProvider.addOFMessageListener(OFType.ERROR, this); //register to receive error OF messages
		
	}
}
