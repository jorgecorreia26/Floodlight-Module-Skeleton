package net.floodlightcontroller.exe1;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import net.floodlightcontroller.core.FloodlightContext;
import net.floodlightcontroller.core.IFloodlightProviderService;
import net.floodlightcontroller.core.IOFMessageListener;
import net.floodlightcontroller.core.IOFSwitch;
import net.floodlightcontroller.core.IListener.Command;
import net.floodlightcontroller.core.module.FloodlightModuleContext;
import net.floodlightcontroller.core.module.FloodlightModuleException;
import net.floodlightcontroller.core.module.IFloodlightModule;
import net.floodlightcontroller.core.module.IFloodlightService;
import net.floodlightcontroller.core.types.MacVlanPair;
import net.floodlightcontroller.learningswitch.LearningSwitch;
import net.floodlightcontroller.packet.Ethernet;
import net.floodlightcontroller.util.OFMessageUtils;

import org.projectfloodlight.openflow.protocol.OFFlowMod;
import org.projectfloodlight.openflow.protocol.OFFlowRemoved;
import org.projectfloodlight.openflow.protocol.match.Match;
import org.projectfloodlight.openflow.protocol.match.MatchField;
import org.projectfloodlight.openflow.protocol.OFFactories;
import org.projectfloodlight.openflow.protocol.OFFlowModCommand;
import org.projectfloodlight.openflow.protocol.OFFlowModFlags;
import org.projectfloodlight.openflow.protocol.OFMessage;
import org.projectfloodlight.openflow.protocol.OFErrorMsg;
import org.projectfloodlight.openflow.protocol.OFPacketIn;
import org.projectfloodlight.openflow.protocol.OFPacketOut;
import org.projectfloodlight.openflow.protocol.OFVersion;
import org.projectfloodlight.openflow.types.MacAddress;
import org.projectfloodlight.openflow.types.OFBufferId;
import org.projectfloodlight.openflow.types.OFPort;
import org.projectfloodlight.openflow.types.U64;
import org.projectfloodlight.openflow.types.VlanVid;
import org.projectfloodlight.openflow.protocol.OFType;
import org.projectfloodlight.openflow.protocol.action.OFAction;
import org.projectfloodlight.openflow.protocol.action.OFActionOutput;
import org.projectfloodlight.openflow.util.HexString;
import org.projectfloodlight.openflow.util.LRULinkedHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Example1a implements IFloodlightModule, IOFMessageListener {
	
	// Module dependencies
    protected IFloodlightProviderService floodlightProvider;
    protected static Logger log;
    
	@Override
	public String getName() {
		return Example1a.class.getSimpleName();
	}
	
	
	
	/**
     * Writes an OFPacketOut message to a switch.
     * @param sw The switch to write the PacketOut to.
     * @param packetInMessage The corresponding PacketIn.
     * @param egressPort The switchport to output the PacketOut.
     */
    private void writePacketOutForPacketIn(IOFSwitch sw, 
                                          OFPacketIn packetInMessage, 
                                          OFPort egressPort) {
    	
    	OFMessageUtils.writePacketOutForPacketIn(sw, packetInMessage, egressPort);
    }
    
    
    /**
     * Processes a OFPacketIn message. If the switch has learned the MAC to port mapping
     * for the pair it will write a FlowMod for it and install it in the switch. If the mapping has not been learned it 
     * we will flood the packet.
     * @param sw
     * @param pi
     * @param cntx
     * @return
     */
    private Command processPacketInMessage(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx) {

    	//get Packet_In data into Ethernet Packet
    	Ethernet eth = IFloodlightProviderService.bcStore.get(cntx, IFloodlightProviderService.CONTEXT_PI_PAYLOAD);
    	//get MAC addresses from the Packet_in data
    	MacAddress sourceMac = eth.getSourceMACAddress();
		MacAddress destMac = eth.getDestinationMACAddress();

	
/*         Ask the switch to flood the packet to all of its ports
*/ 
        this.writePacketOutForPacketIn(sw, pi, OFPort.FLOOD);
        log.info("floding packet in:"
				+ " switch {} Src MAC {} dest MAC {}",
				new Object[]{ sw, sourceMac.toString(), destMac.toString() });

        return Command.CONTINUE;

    }
    
    
    
	@Override
	public boolean isCallbackOrderingPrereq(OFType type, String name) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isCallbackOrderingPostreq(OFType type, String name) {
		// TODO Auto-generated method stub
		return false;
	}

	//OF message listener
		@Override
		public net.floodlightcontroller.core.IListener.Command receive(
				IOFSwitch sw, OFMessage msg, FloodlightContext cntx) {
			switch (msg.getType()) {
	        case PACKET_IN:
	            return this.processPacketInMessage(sw, (OFPacketIn) msg, cntx);
	        case ERROR:
	            log.error("received an error {} from switch {}", (OFErrorMsg) msg, sw);
	            return Command.CONTINUE;
	        default:
	            break;
	    }
	    log.error("received an unexpected message {} from switch {}", msg, sw);
			return Command.CONTINUE; // allow the message to be handled by other PACKET_IN handlers as well (other floodlight controller modules.
		}

	@Override
	public Collection<Class<? extends IFloodlightService>> getModuleServices() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls() {
		// TODO Auto-generated method stub
		return null;
	}

	/* Tell the module loader we depend on it by modifying the getModuleDependencies() function.
	 * */
	@Override
	public Collection<Class<? extends IFloodlightService>> getModuleDependencies() {
		Collection<Class<? extends IFloodlightService>> l =
		        new ArrayList<Class<? extends IFloodlightService>>();
		    l.add(IFloodlightProviderService.class);
		    return l;
	}

	@Override
	public void init(FloodlightModuleContext context)
			throws FloodlightModuleException {
		 floodlightProvider =
	                context.getServiceImpl(IFloodlightProviderService.class); //get controller instance 
		 log = LoggerFactory.getLogger(Example1a.class); //create logger class 
	
	        log.info("Example 1- Scenario A module initialized");
		
	}

	@Override
	public void startUp(FloodlightModuleContext context)
			throws FloodlightModuleException {
		floodlightProvider.addOFMessageListener(OFType.PACKET_IN, this); // register to receive Packet_In messages 
        floodlightProvider.addOFMessageListener(OFType.ERROR, this); //register to receive error OF messages

	}

}
